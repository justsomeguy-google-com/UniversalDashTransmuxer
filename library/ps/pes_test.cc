#include "library/ps/pes.h"

#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include "library/utilities_gmock.h"

namespace {
// These test values are taken from the Widevine packager and live data.
const uint8_t kStreamId = 0xe0;
const uint64_t kPts = 18000;
const bool kDataAlignment = true;

const uint8_t kPayload[] = {
  0x00, 0x00, 0x00, 0x01, 0x09, 0x10, 0x00, 0x00,
  0x00, 0x01, 0x27, 0x42, 0xe0, 0x0d, 0xa9, 0x18,
  0x28, 0x3f, 0x60, 0x0d, 0x41, 0x80, 0x41, 0xad,
  0xb7, 0xa0, 0x2f, 0x01, 0xe9, 0x7b, 0xdf, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x28, 0xce, 0x09, 0x88,
  0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x07, 0x81,
  0xf6, 0x3b, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00,
  0x00, 0x00, 0x01, 0x25, 0xb8, 0x20, 0x00, 0xf9,
  0x31, 0x40, 0x00, 0x52, 0xea, 0xfb, 0xef, 0xbe,
  0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xef,
  0xbe, 0xfb, 0xef, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xaf, 0xff, 0xf9, 0xf0, 0xa0,
  0x43, 0x80, 0x91, 0xeb, 0x7e, 0x5a, 0xbb, 0x9b,
  0xf3, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x25, 0x01,
  0x2e, 0xe0, 0x80, 0x07, 0xff, 0xff, 0xe1, 0x38,
  0xa0, 0x00, 0x20, 0xb1, 0x80, 0x87, 0xde, 0xfc,
  0xf7, 0xb5, 0xb3, 0x73, 0xf3, 0xc3, 0xb8, 0x46,
  0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe, 0x4c, 0x50,
  0x00, 0x14, 0xba, 0xbe, 0xfb, 0xef, 0xbe, 0xfb,
  0xef, 0xbe, 0xfa, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xf0};
const uint8_t kExpectedWriteOutput[] = {
  0x00, 0x00, 0x01, 0xe0, 0x01, 0x5c, 0x84, 0x80,
  0x05, 0x21, 0x00, 0x01, 0x8c, 0xa1, 0x00, 0x00,
  0x00, 0x01, 0x09, 0x10, 0x00, 0x00, 0x00, 0x01,
  0x27, 0x42, 0xe0, 0x0d, 0xa9, 0x18, 0x28, 0x3f,
  0x60, 0x0d, 0x41, 0x80, 0x41, 0xad, 0xb7, 0xa0,
  0x2f, 0x01, 0xe9, 0x7b, 0xdf, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x28, 0xce, 0x09, 0x88, 0x00, 0x00,
  0x00, 0x01, 0x06, 0x00, 0x07, 0x81, 0xf6, 0x3b,
  0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00,
  0x01, 0x25, 0xb8, 0x20, 0x00, 0xf9, 0x31, 0x40,
  0x00, 0x52, 0xea, 0xfb, 0xef, 0xbe, 0xfb, 0xef,
  0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe, 0xfb,
  0xef, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xaf, 0xff, 0xf9, 0xf0, 0xa0, 0x43, 0x80,
  0x91, 0xeb, 0x7e, 0x5a, 0xbb, 0x9b, 0xf3, 0xf0,
  0x00, 0x00, 0x00, 0x01, 0x25, 0x01, 0x2e, 0xe0,
  0x80, 0x07, 0xff, 0xff, 0xe1, 0x38, 0xa0, 0x00,
  0x20, 0xb1, 0x80, 0x87, 0xde, 0xfc, 0xf7, 0xb5,
  0xb3, 0x73, 0xf3, 0xc3, 0xb8, 0x46, 0xfb, 0xef,
  0xbe, 0xfb, 0xef, 0xbe, 0x4c, 0x50, 0x00, 0x14,
  0xba, 0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe,
  0xfa, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb,
  0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba,
  0xeb, 0xae, 0xba, 0xeb, 0xae, 0xba, 0xeb, 0xae,
  0xba, 0xf0};
const uint8_t kExpectedWriteHeaderOutput[] = {
  0x00, 0x00, 0x01, 0xe0, 0x01, 0x5c, 0x84, 0x80,
  0x05, 0x21, 0x00, 0x01, 0x8c, 0xa1};
}  // namespace

namespace dash2hls {

TEST(PES, BuildExpected) {
  PES pes;
  pes.set_stream_id(kStreamId);
  pes.SetPts(kPts);
  pes.SetDataAlignmentIndicator(kDataAlignment);
  pes.AddPayload(kPayload, sizeof(kPayload));

  uint8_t header_buffer[sizeof(kExpectedWriteHeaderOutput)];
  ASSERT_EQ(sizeof(kExpectedWriteHeaderOutput), pes.GetHeaderSize());
  EXPECT_EQ(sizeof(kExpectedWriteHeaderOutput),
            pes.WriteHeader(header_buffer, sizeof(header_buffer)));
  EXPECT_THAT(std::make_pair(header_buffer, sizeof(header_buffer)),
              testing::MemEq(kExpectedWriteHeaderOutput,
                             sizeof(kExpectedWriteHeaderOutput)));

  uint8_t buffer[sizeof(kExpectedWriteOutput)];
  ASSERT_EQ(sizeof(kExpectedWriteOutput), pes.GetSize());
  EXPECT_EQ(sizeof(kExpectedWriteOutput),
            pes.Write(buffer, sizeof(buffer)));
  EXPECT_THAT(std::make_pair(buffer, sizeof(buffer)),
              testing::MemEq(kExpectedWriteOutput,
                             sizeof(kExpectedWriteOutput)));
}

TEST(PES, WritePartial) {
  PES pes;
  pes.set_stream_id(kStreamId);
  pes.SetPts(kPts);
  pes.SetDataAlignmentIndicator(kDataAlignment);
  pes.AddPayload(kPayload, sizeof(kPayload));

  uint8_t buffer[sizeof(kExpectedWriteOutput)];
  ASSERT_EQ(sizeof(kExpectedWriteOutput), pes.GetSize());
  EXPECT_EQ(20U, pes.WritePartial(buffer, 0, 20));
  EXPECT_THAT(std::make_pair(buffer, static_cast<size_t>(20)),
              testing::MemEq(kExpectedWriteOutput, 20));
  EXPECT_EQ(20U, pes.WritePartial(buffer + 20, 20, 20));
  EXPECT_THAT(std::make_pair(buffer, static_cast<size_t>(40)),
              testing::MemEq(kExpectedWriteOutput, 40));
}
}  // namespace dash2hls
