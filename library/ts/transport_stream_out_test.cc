/*
Copyright 2014 Google Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "library/utilities_gmock.h"
#include "library/ts/transport_stream_out.h"

namespace {
const uint8_t kExpectedPatOutput[] = {
  0x47, 0x40, 0x00, 0x30, 0xa6, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0xb0, 0x0d, 0x00,
  0x00, 0xc1, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x20,
  0xf9, 0x62, 0xf5, 0x8b};

const uint8_t kExpectedPmtOutput[] = {
  0x47, 0x40, 0x20, 0x30, 0xa1, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x02,
  0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00, 0x00, 0xe0,
  0x21, 0xf0, 0x00, 0x1b, 0xe0, 0x21, 0xf0, 0x00,
  0x05, 0xcc, 0xcf, 0x0b};

const uint8_t kExpectedAudioPmtOutput[] = {
  0x00, 0x02, 0xb0, 0x37, 0x00, 0x01, 0xc1, 0x00,
  0x00, 0xff, 0xff, 0xf0, 0x25, 0x1d, 0x23, 0x10,
  0x01, 0x02, 0x1f, 0x00, 0x4f, 0xff, 0xff, 0xfe,
  0xfe, 0xff, 0x03, 0x16, 0x00, 0x22, 0x10, 0x04,
  0x11, 0x40, 0x15, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x02,
  0x12, 0x10, 0x0f, 0xe0, 0x22, 0xf0, 0x00, 0x54,
  0xaa, 0x07, 0xeb};

const uint8_t kAudioConfig[] = {0x12, 0x10};

const uint8_t kPes1Expected[] = {
  0x47, 0x40, 0x21, 0x30, 0x07, 0x10, 0x00, 0x29,
  0x32, 0xe0, 0x7e, 0x00, 0x00, 0x00, 0x01, 0xe0,
  0x00, 0xf5, 0x83, 0xc0, 0x0a, 0x31, 0x00, 0x01,
  0xc7, 0x39, 0x11, 0x00, 0x01, 0x8c, 0xa1, 0x00,
  0x00, 0x01, 0xe0, 0x00, 0xe2, 0x84, 0x80, 0x05,
  0x21, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x09, 0xe0, 0x00, 0x00, 0x00, 0x01, 0x67,
  0x42, 0xc0, 0x0b, 0xda, 0x04, 0x04, 0xe8, 0x40,
  0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x07,
  0x83, 0xc5, 0x0a, 0xa8, 0x00, 0x00, 0x00, 0x01,
  0x68, 0xce, 0x3c, 0x80, 0x00, 0x00, 0x00, 0x01,
  0x65, 0x88, 0x84, 0x0e, 0xff, 0xff, 0xfc, 0x15,
  0x85, 0xc5, 0x00, 0x01, 0x50, 0x1f, 0x18, 0x00,
  0x04, 0xd0, 0xc0, 0x00, 0x26, 0x82, 0x99, 0x64,
  0x99, 0x7e, 0x14, 0xcb, 0x24, 0xcb, 0xf2, 0x2c,
  0x8b, 0x22, 0xc8, 0xb2, 0x2c, 0x8b, 0x22, 0xc8,
  0xb2, 0x2c, 0x8b, 0x22, 0xc8, 0xb2, 0x2c, 0x8b,
  0x22, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0x47, 0x00, 0x21, 0x31,
  0x6c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xc2, 0xd8,
  0x0e, 0x24, 0x65, 0x2d, 0xff, 0x88, 0x4c, 0x88,
  0x4c, 0xe2, 0x13, 0x22, 0x13, 0x26, 0x46, 0x58,
  0x59, 0x96, 0x4c, 0xcb, 0xc2, 0xcc, 0xb2, 0x66,
  0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
  0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5c};

const uint8_t kPes2Expected[] = {
  0x47, 0x40, 0x21, 0x32, 0x7d, 0x10, 0x00, 0x29,
  0x32, 0xe0, 0x7e, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x2c,
  0x83, 0xc0, 0x0a, 0x31, 0x00, 0x01, 0xc7, 0x39,
  0x11, 0x00, 0x01, 0x8c, 0xa1, 0x00, 0x00, 0x01,
  0xe0, 0x00, 0x19, 0x84, 0x80, 0x05, 0x21, 0x00,
  0x01, 0x2e, 0xe1, 0x00, 0x00, 0x00, 0x01, 0x09,
  0xe0, 0x00, 0x00, 0x00, 0x01, 0x41, 0x9a, 0x20,
  0x37, 0xc0, 0x48, 0xc0, 0x00, 0x47, 0x40, 0x21,
  0x32, 0x7d, 0x10, 0x00};

const uint8_t kPes3Expected[] = {
  0x47, 0x40, 0x21, 0x33, 0x7d, 0x10, 0x00, 0x29,
  0x32, 0xe0, 0x7e, 0x00, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x2c,
  0x83, 0xc0, 0x0a, 0x31, 0x00, 0x01, 0xc7, 0x39,
  0x11, 0x00, 0x01, 0x8c, 0xa1, 0x00, 0x00, 0x01,
  0xe0, 0x00, 0x19, 0x84, 0x80, 0x05, 0x21, 0x00,
  0x01, 0x5d, 0xc1, 0x00, 0x00, 0x00, 0x01, 0x09,
  0xe0, 0x00, 0x00, 0x00, 0x01, 0x41, 0x9a, 0x40,
  0x37, 0xc0, 0x48, 0xc0, 0x00, 0x47, 0x40, 0x21,
  0x33, 0x7d, 0x10, 0x00};

const uint8_t kPes1[] = {
  0x00, 0x00, 0x01, 0xe0, 0x00, 0xe2, 0x84, 0x80,
  0x05, 0x21, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x01, 0x09, 0xe0, 0x00, 0x00, 0x00, 0x01,
  0x67, 0x42, 0xc0, 0x0b, 0xda, 0x04, 0x04, 0xe8,
  0x40, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00,
  0x07, 0x83, 0xc5, 0x0a, 0xa8, 0x00, 0x00, 0x00,
  0x01, 0x68, 0xce, 0x3c, 0x80, 0x00, 0x00, 0x00,
  0x01, 0x65, 0x88, 0x84, 0x0e, 0xff, 0xff, 0xfc,
  0x15, 0x85, 0xc5, 0x00, 0x01, 0x50, 0x1f, 0x18,
  0x00, 0x04, 0xd0, 0xc0, 0x00, 0x26, 0x82, 0x99,
  0x64, 0x99, 0x7e, 0x14, 0xcb, 0x24, 0xcb, 0xf2,
  0x2c, 0x8b, 0x22, 0xc8, 0xb2, 0x2c, 0x8b, 0x22,
  0xc8, 0xb2, 0x2c, 0x8b, 0x22, 0xc8, 0xb2, 0x2c,
  0x8b, 0x22, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d,
  0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7,
  0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75,
  0xd7, 0x5d, 0x75, 0xd7, 0x5d, 0x75, 0xc2, 0xd8,
  0x0e, 0x24, 0x65, 0x2d, 0xff, 0x88, 0x4c, 0x88,
  0x4c, 0xe2, 0x13, 0x22, 0x13, 0x26, 0x46, 0x58,
  0x59, 0x96, 0x4c, 0xcb, 0xc2, 0xcc, 0xb2, 0x66,
  0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b,
  0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5c};

const uint8_t kPes2[] = {
  0x00, 0x00, 0x01, 0xe0, 0x00, 0x19, 0x84, 0x80,
  0x05, 0x21, 0x00, 0x01, 0x2e, 0xe1, 0x00, 0x00,
  0x00, 0x01, 0x09, 0xe0, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x9a, 0x20, 0x37, 0xc0, 0x48, 0xc0};

const uint8_t kPes3[] = {
  0x00, 0x00, 0x01, 0xe0, 0x00, 0x19, 0x84, 0x80,
  0x05, 0x21, 0x00, 0x01, 0x5d, 0xc1, 0x00, 0x00,
  0x00, 0x01, 0x09, 0xe0, 0x00, 0x00, 0x00, 0x01,
  0x41, 0x9a, 0x40, 0x37, 0xc0, 0x48, 0xc0};

const uint64_t kPesPcr = 5400000;
const uint64_t kPesDts = 18000;
const uint64_t kPesPts = 25500;

const uint8_t kAudioIn[] = {0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e};
const uint8_t kExpectedAudioObjectType = 2;
const uint8_t kExpectedSampleFrequencyIndex = 4;
const uint8_t kExpectedChannelConfig = 2;
const uint8_t kExpectedAudioOut[] = {
  0xff, 0xf1, 0x50, 0xb0, 0x01, 0xdf, 0xfc, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0e};
}  // namespace

namespace dash2hls {

class TransportStreamOutTest : public TransportStreamOut {
 public:
  using TransportStreamOut::kPat;
  using TransportStreamOut::kPmtVideo;
  using TransportStreamOut::OutputRawDataOverTS;
  using TransportStreamOut::OutputPesOverTS;
  using TransportStreamOut::FrameAudio;
};

TEST(TransportStreamOut, PAT) {
  TransportStreamOutTest ts_out;
  std::vector<uint8_t> output;
  uint16_t continuity_counter = 0;
  ts_out.OutputRawDataOverTS(TransportStreamOutTest::kPat,
                             sizeof(TransportStreamOutTest::kPat),
                             TransportStreamOut::kPidPat,
                             &continuity_counter, &output);

  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kExpectedPatOutput, sizeof(kExpectedPatOutput)));
}

TEST(TransportStreamOut, PMT) {
  TransportStreamOutTest ts_out;
  std::vector<uint8_t> output;
  uint16_t continuity_counter = 0;
  ts_out.OutputRawDataOverTS(TransportStreamOutTest::kPmtVideo,
                             sizeof(TransportStreamOutTest::kPmtVideo),
                             TransportStreamOut::kPidPmt,
                             &continuity_counter, &output);

  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kExpectedPmtOutput, sizeof(kExpectedPmtOutput)));
}

TEST(TransportStreamOut, Video) {
  TransportStreamOutTest ts_out;
  std::vector<uint8_t> output;
  uint16_t continuity_counter = 0;
  PES pes1;
  pes1.AddPayload(kPes1, sizeof(kPes1));
  pes1.set_stream_id(PES::kVideoStreamId);
  pes1.SetDts(kPesDts);
  pes1.SetPts(kPesPts);
  pes1.SetCopyright(true);
  pes1.SetOriginal(true);
  ts_out.OutputPesOverTS(pes1, TransportStreamOut::kPidVideo, kPesPcr,
                         &continuity_counter, &output);
  EXPECT_EQ(2, continuity_counter);
  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kPes1Expected, sizeof(kPes1Expected)));

  PES pes2;
  pes2.AddPayload(kPes2, sizeof(kPes2));
  pes2.set_stream_id(PES::kVideoStreamId);
  pes2.SetDts(kPesDts);
  pes2.SetPts(kPesPts);
  pes2.SetCopyright(true);
  pes2.SetOriginal(true);
  output = std::vector<uint8_t>();
  ts_out.OutputPesOverTS(pes2, TransportStreamOut::kPidVideo, kPesPcr,
                         &continuity_counter, &output);
  EXPECT_EQ(3, continuity_counter);
  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kPes2Expected, sizeof(kPes2Expected)));

  PES pes3;
  pes3.AddPayload(kPes3, sizeof(kPes3));
  pes3.set_stream_id(PES::kVideoStreamId);
  pes3.SetDts(kPesDts);
  pes3.SetPts(kPesPts);
  pes3.SetCopyright(true);
  pes3.SetOriginal(true);
  output = std::vector<uint8_t>();
  ts_out.OutputPesOverTS(pes3, TransportStreamOut::kPidVideo, kPesPcr,
                         &continuity_counter, &output);
  EXPECT_EQ(4, continuity_counter);
  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kPes3Expected, sizeof(kPes3Expected)));
}

TEST(TransportStreamOut, AudioPMT) {
  TransportStreamOutTest ts_out;
  ts_out.set_audio_config(kAudioConfig);
  EXPECT_THAT(std::make_pair(ts_out.get_audio_pmt().data(),
                             ts_out.get_audio_pmt().size()),
              testing::MemEq(kExpectedAudioPmtOutput,
                             sizeof(kExpectedAudioPmtOutput)));
}

TEST(TransportStreamOut, Audio) {
  TransportStreamOutTest ts_out;
  ts_out.set_audio_object_type(kExpectedAudioObjectType);
  ts_out.set_sampling_frequency_index(kExpectedSampleFrequencyIndex);
  ts_out.set_channel_config(kExpectedChannelConfig);
  ts_out.set_audio_config(kAudioConfig);
  std::vector<uint8_t> output;
  ts_out.FrameAudio(kAudioIn, sizeof(kAudioIn), &output);
  EXPECT_THAT(std::make_pair(&output[0], output.size()),
              testing::MemEq(kExpectedAudioOut, sizeof(kExpectedAudioOut)));
}
}  // namespace dash2hls
